import React, { useEffect, useState } from 'react'
import { supabase } from '../lib/supa'

export default function RescheduleModal({ open, eventId, onClose, onSaved }) {
  const [date,setDate] = useState('')
  const [start,setStart] = useState('10:00')
  const [end,setEnd] = useState('14:00')
  const [leadDays,setLeadDays] = useState(0)
  const [err,setErr] = useState(null)
  const [saving,setSaving] = useState(false)

  useEffect(()=>{ if(!open) return; (async ()=>{
    const [{ data: e }, { data: s }] = await Promise.all([
      supabase.from('events').select('date,start_time,end_time').eq('id', eventId).maybeSingle(),
      + supabase.from('app_settings_view').select('lead_time_days').maybeSingle()
    ])
    if (e){ setDate(e.date); setStart(e.start_time); setEnd(e.end_time) }
    if (s) setLeadDays(s.lead_time_days ?? 0)
  })() },[open, eventId])

  if(!open) return null
  const today = new Date(); const min = new Date(); min.setDate(today.getDate() + Number(leadDays||0))
  const minStr = min.toISOString().slice(0,10)
  const underLead = date && date < minStr

  async function save(e){
    e.preventDefault(); setErr(null)
    if (underLead){ setErr(`Date violates lead time (${leadDays} days)`); return }
    setSaving(true)
    const { error } = await supabase.from('events').update({ date, start_time:start, end_time:end }).eq('id', eventId)
    setSaving(false)
    if (error) setErr(error.message); else { onSaved?.(); onClose() }
  }

  return (
    <div className="modal"><div className="modal-card">
      <h2>Reschedule</h2>
      <form onSubmit={save} className="grid" style={{gridTemplateColumns:'1fr 1fr', gap:12}}>
        <div>
          <label className="muted">Date {leadDays? `(≥ ${minStr})`:''}</label>
          <input className="input" type="date" required min={minStr} value={date} onChange={e=>setDate(e.target.value)} />
        </div>
        <div className="row">
          <div style={{flex:1}}>
            <label className="muted">Start</label>
            <input className="input" type="time" required value={start} onChange={e=>setStart(e.target.value)} />
          </div>
          <div style={{width:12}}/>
          <div style={{flex:1}}>
            <label className="muted">End</label>
            <input className="input" type="time" required value={end} onChange={e=>setEnd(e.target.value)} />
          </div>
        </div>
        {underLead && <div className="text-danger" style={{gridColumn:'1 / -1'}}>Date violates lead time policy.</div>}
        {err && <div className="text-danger" style={{gridColumn:'1 / -1'}}>{err}</div>}
        <div className="row" style={{gridColumn:'1 / -1', marginTop:8}}>
          <button type="button" className="btn outline" onClick={onClose}>Close</button>
          <div style={{flex:1}} />
          <button className="btn accent" disabled={saving} type="submit">{saving ? 'Saving…' : 'Save'}</button>
        </div>
      </form>
    </div></div>
  )
}
